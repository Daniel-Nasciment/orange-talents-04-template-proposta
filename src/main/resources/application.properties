# datasource h2
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:proposta-orange
spring.datasource.username=sa
spring.datasource.password=

# Banco de dados MYSQL
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=${DATABASE_URL:jdbc:mysql://localhost:3306/propostas?createDatabaseIfNotExist=true}
#spring.datasource.username=${DATABASE_USER:root}
#spring.datasource.password=${DATABASE_PASSWORD:1234567}

# jpa
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

# h2
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# actuator / prometheus
management.endpoints.web.exposure.include=health,metrics,prometheus
management.endpoints.web.exposure.exclude=env,beans
management.endpoint.health.show-details=ALWAYS
management.endpoints.prometheus.enabled=true

# dominio da aplicação
analises.host=${ANALISES_URL:http://localhost:9999/api/solicitacao}
cartoes.host=${CARTOES_URL:http://localhost:8888/api/cartoes}

## spring security resource server configuration
# ACCESS TOKEN URL - http://localhost:18080/auth/realms/propostas/protocol/openid-connect/token
# onde o Spring Security pode encontrar nosso authorization server
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/propostas}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/propostas/protocol/openid-connect/certs}
# aonde o Spring Security pode encontrar as chaves para conseguir validar a assinatura do token